stages:
  - stage: 'Release_to_Staging'
    displayName: 'Release to Staging'
    dependsOn:
      - 'Build'
    condition: and(eq(variables['stage_staging_enabled'], true), succeeded())
    jobs:
      - deployment: 'release_to_staging'
        timeoutInMinutes: 15
        cancelTimeoutInMinutes: 5
        pool: 'Default'
        environment: 'StagingOnIC'
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    NEW_DEPLOY_TIMESTAMP="$(date "+%s")"
                    echo "##vso[task.setvariable variable=DEPLOY_TIMESTAMP]${NEW_DEPLOY_TIMESTAMP}"
                  displayName: 'Preparation: evaluate DEPLOY_TIMESTAMP'

                - bash: |
                    NEW_DEPLOY_DATETIME="$(date "+%Y-%m-%dT%H:%M:%S")"
                    echo "##vso[task.setvariable variable=DEPLOY_DATETIME]${NEW_DEPLOY_DATETIME}"
                  displayName: 'Preparation: evaluate DEPLOY_DATETIME'

                # //////////////////////////////////////////////////////////////////////
                # // DEBUG
                - bash: |
                    echo "\$PROJECT_NAME                            = '${PROJECT_NAME}'"
                    echo "\$PROJECT_ROOT                            = '${PROJECT_ROOT}'"
                    echo "\$BUILD_DIRECTORY                         = '${BUILD_DIRECTORY}'"

                    echo "\$ARTIFACT_VERSION                        = '${ARTIFACT_VERSION}'"
                    echo "\$ARTIFACT_BUILD_ID                       = '${ARTIFACT_BUILD_ID}'"
                    echo "\$ARTIFACT_BRANCH_NAME                    = '${ARTIFACT_BRANCH_NAME}'"
                    echo "\$ARTIFACT_TIMESTAMP                      = '${ARTIFACT_TIMESTAMP}'"
                    echo "\$ARTIFACT_DATETIME                       = '${ARTIFACT_DATETIME}'"
                    echo "\$ARTIFACT_JS_NAME                        = '${ARTIFACT_JS_NAME}'"

                    echo "\$DEPLOY_TIMESTAMP                        = '${DEPLOY_TIMESTAMP}'"
                    echo "\$DEPLOY_DATETIME                         = '${DEPLOY_DATETIME}'"

                  displayName: 'DEBUG: print Environment Variables'
                  condition: eq(variables['debug__staging_variables'], true)

                # //////////////////////////////////////////////////////////////////////
                # // Preparation
                - task: InstallSSHKey@0
                  inputs:
                    knownHostsEntry: $(STAGING_ENV_SSH_KNOWN_HOST_ENTRY)
                    sshPublicKey: $(STAGING_ENV_SSH_PUBLIC_KEY)
                    sshKeySecureFile: $(STAGING_ENV_SSH_PRIVATE_KEY_SECURE_FILENAME)
                  displayName: 'Preparation: install ssh key'

                - bash: |
                    ssh -vT '$(staging_env_user)'@'$(staging_env_host)' 'exit 0'
                  displayName: 'DEBUG: ssh connection'
                  condition: eq(variables['debug__staging_ssh_host_connection'], true)

                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: '$(ARTIFACT_JS_NAME)'
                    downloadPath: '$(System.ArtifactsDirectory)'
                  displayName: 'Preparation: download artifact'

                - bash: |
                    ls -al '$(System.ArtifactsDirectory)/$(ARTIFACT_JS_NAME)'
                  displayName: 'DEBUG: inspect downloaded frontend artifact'
                  condition: eq(variables['debug__staging_downloaded_frontend_artifact'], true)

                - bash: |
                    sed -i "s/__DEPLOY_TIMESTAMP__/${DEPLOY_TIMESTAMP}/" '$(System.ArtifactsDirectory)/$(ARTIFACT_JS_NAME)/__version.json'
                    sed -i "s/__DEPLOY_DATETIME__/${DEPLOY_DATETIME}/" '$(System.ArtifactsDirectory)/$(ARTIFACT_JS_NAME)/__version.json'
                  displayName: 'Preparation: define artifact deployment info'

                - bash: |
                    cat '$(System.ArtifactsDirectory)/$(ARTIFACT_JS_NAME)/__version.json'
                    echo ''
                  displayName: 'DEBUG: artifact deployment info'
                  condition: eq(variables['debug__staging_artifact_deployment_info'], true)

                - bash: |
                    echo "WARN:  'do deployment to IC here, but currently not implemented'"
                  displayName: 'Deployment: publish frontend'

                # //////////////////////////////////////////////////////////////////////
                # // Test
                - bash: |
                    echo 'INFO:  Check $(staging_env_public_url)'
                    # LOCAL_STAGING_ENV_PUBLIC_URL_CREDENTIALS='$(STAGING_ENV_PUBLIC_URL_CREDENTIALS)'
                    # if [[ -n "${LOCAL_STAGING_ENV_PUBLIC_URL_CREDENTIALS}" ]]; then
                    #   curl -fsSL --user "${LOCAL_STAGING_ENV_PUBLIC_URL_CREDENTIALS}" '$(staging_env_public_url)'
                    # else
                    #   curl -fsSL '$(staging_env_public_url)'
                    # fi
                    # echo ""
                  displayName: 'Test: is application up and running'
